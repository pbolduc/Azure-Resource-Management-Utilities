// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for AppServiceCertificateOrdersOperations.
    /// </summary>
    public static partial class AppServiceCertificateOrdersOperationsExtensions
    {
            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder> List(this IAppServiceCertificateOrdersOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder>> ListAsync(this IAppServiceCertificateOrdersOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate information for a certificate order.
            /// </summary>
            /// <remarks>
            /// Validate information for a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appServiceCertificateOrder'>
            /// Information for a certificate order.
            /// </param>
            public static void ValidatePurchaseInformation(this IAppServiceCertificateOrdersOperations operations, AppServiceCertificateOrder appServiceCertificateOrder)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ValidatePurchaseInformationAsync(appServiceCertificateOrder), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate information for a certificate order.
            /// </summary>
            /// <remarks>
            /// Validate information for a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appServiceCertificateOrder'>
            /// Information for a certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ValidatePurchaseInformationAsync(this IAppServiceCertificateOrdersOperations operations, AppServiceCertificateOrder appServiceCertificateOrder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ValidatePurchaseInformationWithHttpMessagesAsync(appServiceCertificateOrder, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder> ListByResourceGroup(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder>> ListByResourceGroupAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServiceCertificate> ListCertificates(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListCertificatesAsync(resourceGroupName, certificateOrderName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServiceCertificate>> ListCertificatesAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListCertificatesWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Get the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static AppServiceCertificate GetCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).GetCertificateAsync(resourceGroupName, certificateOrderName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Get the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServiceCertificate> GetCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            public static AppServiceCertificate CreateOrUpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).CreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServiceCertificate> CreateOrUpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            public static AppServiceCertificate BeginCreateOrUpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).BeginCreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </summary>
            /// <remarks>
            /// Creates or updates a certificate and associates with key vault secret.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key vault certificate resource Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServiceCertificate> BeginCreateOrUpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Delete the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static void DeleteCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).DeleteCertificateAsync(resourceGroupName, certificateOrderName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the certificate associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// Delete the certificate associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='certificateOrderName'>
            /// Name of the certificate order.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a certificate order.
            /// </summary>
            /// <remarks>
            /// Get a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static AppServiceCertificateOrder Get(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).GetAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a certificate order.
            /// </summary>
            /// <remarks>
            /// Get a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServiceCertificateOrder> GetAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to to use for the certificate order.
            /// </param>
            public static AppServiceCertificateOrder CreateOrUpdate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).CreateOrUpdateAsync(resourceGroupName, name, certificateDistinguishedName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to to use for the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServiceCertificateOrder> CreateOrUpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to to use for the certificate order.
            /// </param>
            public static AppServiceCertificateOrder BeginCreateOrUpdate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, name, certificateDistinguishedName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order.
            /// </summary>
            /// <remarks>
            /// Create or update a certificate purchase order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to to use for the certificate order.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServiceCertificateOrder> BeginCreateOrUpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Delete an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static void DeleteCertificateOrder(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).DeleteCertificateOrderAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Delete an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteCertificateOrderAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Reissue an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Reissue an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Parameters for the reissue.
            /// </param>
            public static void Reissue(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, ReissueCertificateOrderRequest reissueCertificateOrderRequest)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ReissueAsync(resourceGroupName, name, reissueCertificateOrderRequest), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reissue an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Reissue an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Parameters for the reissue.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ReissueAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, ReissueCertificateOrderRequest reissueCertificateOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ReissueWithHttpMessagesAsync(resourceGroupName, name, reissueCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Renew an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Renew an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            public static void Renew(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, RenewCertificateOrderRequest renewCertificateOrderRequest)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RenewAsync(resourceGroupName, name, renewCertificateOrderRequest), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renew an existing certificate order.
            /// </summary>
            /// <remarks>
            /// Renew an existing certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task RenewAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, RenewCertificateOrderRequest renewCertificateOrderRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.RenewWithHttpMessagesAsync(resourceGroupName, name, renewCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Resend certificate email.
            /// </summary>
            /// <remarks>
            /// Resend certificate email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static void ResendEmail(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ResendEmailAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resend certificate email.
            /// </summary>
            /// <remarks>
            /// Resend certificate email.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ResendEmailAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ResendEmailWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='nameIdentifier'>
            /// Email address
            /// </param>
            public static void ResendRequestEmails(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, NameIdentifier nameIdentifier)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ResendRequestEmailsAsync(resourceGroupName, name, nameIdentifier), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='nameIdentifier'>
            /// Email address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ResendRequestEmailsAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, NameIdentifier nameIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ResendRequestEmailsWithHttpMessagesAsync(resourceGroupName, name, nameIdentifier, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieve the list of certificate actions.
            /// </summary>
            /// <remarks>
            /// Retrieve the list of certificate actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static System.Collections.Generic.IList<CertificateOrderAction> RetrieveCertificateActions(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RetrieveCertificateActionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the list of certificate actions.
            /// </summary>
            /// <remarks>
            /// Retrieve the list of certificate actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<CertificateOrderAction>> RetrieveCertificateActionsAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateActionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve email history.
            /// </summary>
            /// <remarks>
            /// Retrieve email history.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static System.Collections.Generic.IList<CertificateEmail> RetrieveCertificateEmailHistory(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RetrieveCertificateEmailHistoryAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve email history.
            /// </summary>
            /// <remarks>
            /// Retrieve email history.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<CertificateEmail>> RetrieveCertificateEmailHistoryAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateEmailHistoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='siteSealRequest'>
            /// Site seal request
            /// </param>
            public static SiteSeal RetrieveSiteSeal(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, SiteSealRequest siteSealRequest)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RetrieveSiteSealAsync(resourceGroupName, name, siteSealRequest), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='siteSealRequest'>
            /// Site seal request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSeal> RetrieveSiteSealAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, SiteSealRequest siteSealRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveSiteSealWithHttpMessagesAsync(resourceGroupName, name, siteSealRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static void VerifyDomainOwnership(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).VerifyDomainOwnershipAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order.
            /// </summary>
            /// <remarks>
            /// Verify domain ownership for this certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task VerifyDomainOwnershipAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.VerifyDomainOwnershipWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder> ListNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificate orders in a subscription.
            /// </summary>
            /// <remarks>
            /// List all certificate orders in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder>> ListNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder> ListByResourceGroupNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group.
            /// </summary>
            /// <remarks>
            /// Get certificate orders in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServiceCertificateOrder>> ListByResourceGroupNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServiceCertificate> ListCertificatesNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListCertificatesNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order.
            /// </summary>
            /// <remarks>
            /// List all certificates associated with a certificate order.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServiceCertificate>> ListCertificatesNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
