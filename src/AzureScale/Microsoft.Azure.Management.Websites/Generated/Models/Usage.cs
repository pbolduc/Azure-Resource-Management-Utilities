// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Usage of the quota resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Usage : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Usage class.
        /// </summary>
        public Usage() { }

        /// <summary>
        /// Initializes a new instance of the Usage class.
        /// </summary>
        /// <param name="location">Resource Location.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource Name.</param>
        /// <param name="kind">Kind of resource.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="displayName">Friendly name shown in the UI.</param>
        /// <param name="usageName">Name of the quota.</param>
        /// <param name="resourceName">Name of the quota resource.</param>
        /// <param name="unit">Units of measurement for the quota
        /// resource.</param>
        /// <param name="currentValue">The current value of the resource
        /// counter.</param>
        /// <param name="limit">The resource limit.</param>
        /// <param name="nextResetTime">Next reset time for the resource
        /// counter.</param>
        /// <param name="computeMode">Compute mode used for this usage.
        /// Possible values include: 'Shared', 'Dedicated', 'Dynamic'</param>
        /// <param name="siteMode">Site mode used for this usage.</param>
        public Usage(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string displayName = default(string), string usageName = default(string), string resourceName = default(string), string unit = default(string), long? currentValue = default(long?), long? limit = default(long?), System.DateTime? nextResetTime = default(System.DateTime?), ComputeModeOptions? computeMode = default(ComputeModeOptions?), string siteMode = default(string))
            : base(location, id, name, kind, type, tags)
        {
            DisplayName = displayName;
            UsageName = usageName;
            ResourceName = resourceName;
            Unit = unit;
            CurrentValue = currentValue;
            Limit = limit;
            NextResetTime = nextResetTime;
            ComputeMode = computeMode;
            SiteMode = siteMode;
        }

        /// <summary>
        /// Gets friendly name shown in the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets name of the quota.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.name")]
        public string UsageName { get; private set; }

        /// <summary>
        /// Gets name of the quota resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceName")]
        public string ResourceName { get; private set; }

        /// <summary>
        /// Gets units of measurement for the quota resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.unit")]
        public string Unit { get; private set; }

        /// <summary>
        /// Gets the current value of the resource counter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentValue")]
        public long? CurrentValue { get; private set; }

        /// <summary>
        /// Gets the resource limit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.limit")]
        public long? Limit { get; private set; }

        /// <summary>
        /// Gets next reset time for the resource counter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nextResetTime")]
        public System.DateTime? NextResetTime { get; private set; }

        /// <summary>
        /// Gets compute mode used for this usage. Possible values include:
        /// 'Shared', 'Dedicated', 'Dynamic'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.computeMode")]
        public ComputeModeOptions? ComputeMode { get; private set; }

        /// <summary>
        /// Gets site mode used for this usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.siteMode")]
        public string SiteMode { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
